esphome:
  name: heidelberg-wallbox
  friendly_name: Heidelberg Wallbox

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "*****************************"

ota:
  password: "*****************************"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Heidelberg-Wallbox"
    password: "*************"

captive_portal:

external_components:
  - source:
      type: git
      url: https://github.com/esphome/esphome
      ref: dev
    components: [ modbus, modbus_controller ]

uart:
  id: mod_bus
  tx_pin: 5
  rx_pin: 4
  baud_rate: 19200
  stop_bits: 1
  parity: even
  #debug:
  #  direction: BOTH

modbus:
  id: modbus_heidelberg_wallbox
  send_wait_time: 200ms

modbus_controller:
  - id: heidelberg_wallbox_id01
    address: 0x2
    modbus_id: modbus_heidelberg_wallbox
    command_throttle: 200ms
    setup_priority: -10
    update_interval: 15s

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Modbus Controller"
    update_interval: 300s

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: version
    name: "Modbus Register-Layouts Version"
    address: 0x0004
    register_type: read
    value_type: U_WORD
    skip_updates: 300
    force_new_range: true

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: charg_state
    name: "Charging State"
    address: 0x0005
    register_type: read
    value_type: U_WORD
    force_new_range: true

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: l1_a_rms
    name: "Current L1"
    address: 0x0006
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    force_new_range: true
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: l2_a_rms
    name: "Current L2"
    address: 0x0007
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    force_new_range: true
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: l3_a_rms
    name: "Current L3"
    address: 0x0008
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    force_new_range: true
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: pcb_temp
    name: "Temperature (PCB)"
    address: 0x0009
    unit_of_measurement: "Â°C"
    register_type: read
    value_type: S_WORD
    skip_updates: 300
    force_new_range: true
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: l1_v_rms
    name: "Voltage L1"
    address: 0x000A
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    skip_updates: 4
    force_new_range: true
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: l2_v_rms
    name: "Voltage L2"
    address: 0x000B
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    skip_updates: 4
    force_new_range: true
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: l3_v_rms
    name: "Voltage L3"
    address: 0x000C
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    skip_updates: 4
    force_new_range: true
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: extern_lock_state
    name: "Extern Lock State"
    address: 0x000D
    register_type: read
    value_type: U_WORD
    force_new_range: true

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: l1_l2_l3_power
    name: "Power"
    address: 0x000E
    unit_of_measurement: "W"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    skip_updates: 0
    force_new_range: true

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: kwh_power_on
    name: "Energy since Power on"
    address: 0x000F
    unit_of_measurement: "kWh"
    register_type: read
    value_type: U_DWORD
    force_new_range: true
    accuracy_decimals: 3
    filters:
      - multiply: 0.001

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: kwh_total
    name: "Energy since Installation"
    address: 0x0011
    unit_of_measurement: "kWh"
    register_type: read
    value_type: U_DWORD
    force_new_range: true
    accuracy_decimals: 3
    filters:
      - multiply: 0.001

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: fix_max_current
    name: "Hardware configuration max current"
    address: 0x0064
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    force_new_range: true
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: fix_min_current
    name: "Hardware configuration min current"
    address: 0x0065
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    force_new_range: true
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: watchdog
    name: "WatchDog TimeOut"
    address: 0x0101
    unit_of_measurement: "ms"
    register_type: holding
    value_type: U_WORD
    force_new_range: true
    skip_updates: 0

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: stand_by_control
    name: "Standby Function Control"
    address: 0x0102
    register_type: holding
    value_type: U_WORD
    force_new_range: true
    skip_updates: 0

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: remote_lock
    name: "Remote Lock"
    address: 0x0103
    register_type: holding
    value_type: U_WORD
    force_new_range: true
    skip_updates: 0

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: max_current
    name: "Maximal Current Command"
    address: 0x0105
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_WORD
    force_new_range: true
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: heidelberg_wallbox_id01
    id: failsafe_current
    name: "FailSafe Current"
    address: 0x0106
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_WORD
    force_new_range: true
    accuracy_decimals: 0
    filters:
      - multiply: 0.1

  - platform: homeassistant
    entity_id: input_number.wb_max_current #Slider from HASS, create as Helper
    id: wb_max_current
    internal: true
    on_value:
      then:
        - lambda: |-
            uint16_t payload = id(wb_max_current).state * 10;
            ESP_LOGI("main", "set max current %d", payload);
            // Create a modbus command item with the max current value as the payload
            esphome::modbus_controller::ModbusCommandItem set_payload_command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(heidelberg_wallbox_id01, 0x0105, payload);
            // Submit the command to the send queue
            heidelberg_wallbox_id01->queue_command(set_payload_command);

  - platform: homeassistant
    entity_id: input_number.wb_watchdog_timeout
    id: wb_watchdog_timeout
    internal: true
    on_value:
      then:
        - lambda: |-
            uint16_t payload = id(wb_watchdog_timeout).state;
            ESP_LOGI("main", "set watchdog_timeout %d", payload);
            esphome::modbus_controller::ModbusCommandItem set_payload_command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(heidelberg_wallbox_id01, 0x0101, payload);
            heidelberg_wallbox_id01->queue_command(set_payload_command);

  - platform: homeassistant
    entity_id: input_number.wb_max_failsafe_current
    id: wb_max_failssafe_current
    internal: true
    on_value:
      then:
        - lambda: |-
            uint16_t payload = id(wb_max_failssafe_current).state * 10;
            ESP_LOGI("main", "set max failssafe current %d", payload);
            esphome::modbus_controller::ModbusCommandItem set_payload_command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(heidelberg_wallbox_id01, 0x0106, payload);
            heidelberg_wallbox_id01->queue_command(set_payload_command);

binary_sensor:
  - platform: homeassistant
    entity_id: input_boolean.wb_remote_lock
    id: wb_remote_lock
    internal: true
    on_state:
      then:
        - lambda: |-
            uint16_t payload = 1;
            if ( id(wb_remote_lock).state == true ) {
              payload = 0;
            }
            ESP_LOGI("main", "set remote lock %d", payload);
            esphome::modbus_controller::ModbusCommandItem set_payload_command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(heidelberg_wallbox_id01, 0x0103, payload);
            heidelberg_wallbox_id01->queue_command(set_payload_command);

  - platform: homeassistant
    entity_id: input_boolean.wb_standby_control
    id: wb_standby_control
    internal: true
    on_state:
      then:
        - lambda: |-
            uint16_t payload = 4;
            if ( id(wb_standby_control).state == true ) {
              payload = 0;
            }
            ESP_LOGI("main", "set standby control %d", payload);
            esphome::modbus_controller::ModbusCommandItem set_payload_command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(heidelberg_wallbox_id01, 0x0102, payload);
            heidelberg_wallbox_id01->queue_command(set_payload_command);
